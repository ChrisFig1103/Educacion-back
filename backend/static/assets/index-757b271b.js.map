{"version":3,"mappings":"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","names":["Layout","jsxs","styles","jsx","Outlet","logo","askApi","options","response","_a","_b","_c","_d","_e","_f","_g","_h","parsedResponse","chatApi","_i","getCitationFilePath","citation","Approaches","parseAnswerToHtml","answer","onCitationClicked","citations","followupQuestions","parsedAnswer","match","content","part","index","citationIndex","path","renderToStaticMarkup","AnswerIcon","Sparkle28Filled","Answer","isSelected","onThoughtProcessClicked","onSupportingContentClicked","onFollowupQuestionClicked","showFollowupQuestions","useMemo","sanitizedAnswerHtml","DOMPurify","Stack","IconButton","x","i","AnswerLoading","animatedStyles","useSpring","animated","AnswerError","error","onRetry","ErrorCircle24Regular","PrimaryButton","QuestionInput","onSend","disabled","placeholder","clearOnSend","question","setQuestion","useState","sendQuestion","onEnterPress","ev","onQuestionChange","_ev","newValue","sendQuestionDisabled","TextField","Send28Filled","Example","text","value","onClick","EXAMPLES","ExampleList","onExampleClicked","UserChatMessage","message","parseSupportingContentItem","item","parts","title","SupportingContent","supportingContent","parsed","AnalysisPanelTabs","pivotItemDisabledStyle","AnalysisPanel","activeTab","activeCitation","citationHeight","className","onActiveTabChanged","isDisabledThoughtProcessTab","isDisabledSupportingContentTab","isDisabledCitationTab","sanitizedThoughts","Pivot","pivotItem","PivotItem","SettingsButton","Settings24Regular","Text","ClearChatButton","Delete24Regular","Chat","isConfigPanelOpen","setIsConfigPanelOpen","promptTemplate","setPromptTemplate","retrieveCount","setRetrieveCount","useSemanticRanker","setUseSemanticRanker","useSemanticCaptions","setUseSemanticCaptions","excludeCategory","setExcludeCategory","useSuggestFollowupQuestions","setUseSuggestFollowupQuestions","lastQuestionRef","useRef","chatMessageStreamEnd","isLoading","setIsLoading","setError","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","selectedAnswer","setSelectedAnswer","answers","setAnswers","makeApiRequest","request","a","result","e","clearChat","useEffect","onPromptTemplateChange","onRetrieveCountChange","onUseSemanticRankerChange","checked","onUseSemanticCaptionsChange","onExcludeCategoryChanged","onUseSuggestFollowupQuestionsChange","example","onShowCitation","onToggleTab","tab","c","q","Fragment","Panel","DefaultButton","SpinButton","Checkbox","initializeIcons","router","createHashRouter","ReactDOM","React","RouterProvider"],"sources":["../../../frontend/src/pages/layout/Layout.tsx","../../../frontend/src/assets/Logo.svg","../../../frontend/src/api/api.ts","../../../frontend/src/api/models.ts","../../../frontend/src/components/Answer/AnswerParser.tsx","../../../frontend/src/components/Answer/AnswerIcon.tsx","../../../frontend/src/components/Answer/Answer.tsx","../../../frontend/src/components/Answer/AnswerLoading.tsx","../../../frontend/src/components/Answer/AnswerError.tsx","../../../frontend/src/components/QuestionInput/QuestionInput.tsx","../../../frontend/src/components/Example/Example.tsx","../../../frontend/src/components/Example/ExampleList.tsx","../../../frontend/src/components/UserChatMessage/UserChatMessage.tsx","../../../frontend/src/components/SupportingContent/SupportingContentParser.ts","../../../frontend/src/components/SupportingContent/SupportingContent.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanelTabs.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanel.tsx","../../../frontend/src/components/SettingsButton/SettingsButton.tsx","../../../frontend/src/components/ClearChatButton/ClearChatButton.tsx","../../../frontend/src/pages/chat/Chat.tsx","../../../frontend/src/index.tsx"],"sourcesContent":["import { Outlet, NavLink, Link } from \"react-router-dom\";\r\n\r\nimport github from \"../../assets/github.svg\";\r\n\r\nimport styles from \"./Layout.module.css\";\r\n\r\nconst Layout = () => {\r\n    return (\r\n        <div className={styles.layout}>\r\n            <header className={styles.header} role={\"banner\"}>\r\n               \r\n            </header>\r\n\r\n            <Outlet />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Layout;\r\n","export default \"__VITE_ASSET__2fad1e46__\"","import { AskRequest, AskResponse, ChatRequest } from \"./models\";\r\n\r\nexport async function askApi(options: AskRequest): Promise<AskResponse> {\r\n    const response = await fetch(\"/ask\", {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n            question: options.question,\r\n            approach: options.approach,\r\n            overrides: {\r\n                semantic_ranker: options.overrides?.semanticRanker,\r\n                semantic_captions: options.overrides?.semanticCaptions,\r\n                top: options.overrides?.top,\r\n                temperature: options.overrides?.temperature,\r\n                prompt_template: options.overrides?.promptTemplate,\r\n                prompt_template_prefix: options.overrides?.promptTemplatePrefix,\r\n                prompt_template_suffix: options.overrides?.promptTemplateSuffix,\r\n                exclude_category: options.overrides?.excludeCategory\r\n            }\r\n        })\r\n    });\r\n\r\n    const parsedResponse: AskResponse = await response.json();\r\n    if (response.status > 299 || !response.ok) {\r\n        throw Error(parsedResponse.error || \"Unknown error\");\r\n    }\r\n\r\n    return parsedResponse;\r\n}\r\n\r\nexport async function chatApi(options: ChatRequest): Promise<AskResponse> {\r\n    const response = await fetch(\"/chat\", {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n            history: options.history,\r\n            approach: options.approach,\r\n            overrides: {\r\n                semantic_ranker: options.overrides?.semanticRanker,\r\n                semantic_captions: options.overrides?.semanticCaptions,\r\n                top: options.overrides?.top,\r\n                temperature: options.overrides?.temperature,\r\n                prompt_template: options.overrides?.promptTemplate,\r\n                prompt_template_prefix: options.overrides?.promptTemplatePrefix,\r\n                prompt_template_suffix: options.overrides?.promptTemplateSuffix,\r\n                exclude_category: options.overrides?.excludeCategory,\r\n                suggest_followup_questions: options.overrides?.suggestFollowupQuestions\r\n            }\r\n        })\r\n    });\r\n\r\n    const parsedResponse: AskResponse = await response.json();\r\n    if (response.status > 299 || !response.ok) {\r\n        throw Error(parsedResponse.error || \"Unknown error\");\r\n    }\r\n\r\n    return parsedResponse;\r\n}\r\n\r\nexport function getCitationFilePath(citation: string): string {\r\n    return `/content/${citation}`;\r\n}\r\n","export const enum Approaches {\r\n    RetrieveThenRead = \"rtr\",\r\n    ReadRetrieveRead = \"rrr\",\r\n    ReadDecomposeAsk = \"rda\"\r\n}\r\n\r\nexport type AskRequestOverrides = {\r\n    semanticRanker?: boolean;\r\n    semanticCaptions?: boolean;\r\n    excludeCategory?: string;\r\n    top?: number;\r\n    temperature?: number;\r\n    promptTemplate?: string;\r\n    promptTemplatePrefix?: string;\r\n    promptTemplateSuffix?: string;\r\n    suggestFollowupQuestions?: boolean;\r\n};\r\n\r\nexport type AskRequest = {\r\n    question: string;\r\n    approach: Approaches;\r\n    overrides?: AskRequestOverrides;\r\n};\r\n\r\nexport type AskResponse = {\r\n    answer: string;\r\n    thoughts: string | null;\r\n    data_points: string[];\r\n    error?: string;\r\n};\r\n\r\nexport type ChatTurn = {\r\n    user: string;\r\n    bot?: string;\r\n};\r\n\r\nexport type ChatRequest = {\r\n    history: ChatTurn[];\r\n    approach: Approaches;\r\n    overrides?: AskRequestOverrides;\r\n};\r\n","import { renderToStaticMarkup } from \"react-dom/server\";\r\nimport { getCitationFilePath } from \"../../api\";\r\n\r\ntype HtmlParsedAnswer = {\r\n    answerHtml: string;\r\n    citations: string[];\r\n    followupQuestions: string[];\r\n};\r\n\r\nexport function parseAnswerToHtml(answer: string, onCitationClicked: (citationFilePath: string) => void): HtmlParsedAnswer {\r\n    const citations: string[] = [];\r\n    const followupQuestions: string[] = [];\r\n\r\n    // Extract any follow-up questions that might be in the answer\r\n    let parsedAnswer = answer.replace(/<<([^>>]+)>>/g, (match, content) => {\r\n        followupQuestions.push(content);\r\n        return \"\";\r\n    });\r\n\r\n    // trim any whitespace from the end of the answer after removing follow-up questions\r\n    parsedAnswer = parsedAnswer.trim();\r\n\r\n    const parts = parsedAnswer.split(/\\[([^\\]]+)\\]/g);\r\n\r\n    const fragments: string[] = parts.map((part, index) => {\r\n        if (index % 2 === 0) {\r\n            return part;\r\n        } else {\r\n            let citationIndex: number;\r\n            if (citations.indexOf(part) !== -1) {\r\n                citationIndex = citations.indexOf(part) + 1;\r\n            } else {\r\n                citations.push(part);\r\n                citationIndex = citations.length;\r\n            }\r\n\r\n            const path = getCitationFilePath(part);\r\n\r\n            return renderToStaticMarkup(\r\n                <a className=\"supContainer\" title={part} onClick={() => onCitationClicked(path)}>\r\n                    <sup>{citationIndex}</sup>\r\n                </a>\r\n            );\r\n        }\r\n    });\r\n\r\n    return {\r\n        answerHtml: fragments.join(\"\"),\r\n        citations,\r\n        followupQuestions\r\n    };\r\n}\r\n","import { Sparkle28Filled } from \"@fluentui/react-icons\";\r\n\r\nexport const AnswerIcon = () => {\r\n    return <Sparkle28Filled primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Answer logo\" />;\r\n};\r\n","import { useMemo } from \"react\";\r\nimport { Stack, IconButton } from \"@fluentui/react\";\r\nimport DOMPurify from \"dompurify\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\n\r\nimport { AskResponse, getCitationFilePath } from \"../../api\";\r\nimport { parseAnswerToHtml } from \"./AnswerParser\";\r\nimport { AnswerIcon } from \"./AnswerIcon\";\r\n\r\ninterface Props {\r\n    answer: AskResponse;\r\n    isSelected?: boolean;\r\n    onCitationClicked: (filePath: string) => void;\r\n    onThoughtProcessClicked: () => void;\r\n    onSupportingContentClicked: () => void;\r\n    onFollowupQuestionClicked?: (question: string) => void;\r\n    showFollowupQuestions?: boolean;\r\n}\r\n\r\nexport const Answer = ({\r\n    answer,\r\n    isSelected,\r\n    onCitationClicked,\r\n    onThoughtProcessClicked,\r\n    onSupportingContentClicked,\r\n    onFollowupQuestionClicked,\r\n    showFollowupQuestions\r\n}: Props) => {\r\n    const parsedAnswer = useMemo(() => parseAnswerToHtml(answer.answer, onCitationClicked), [answer]);\r\n\r\n    const sanitizedAnswerHtml = DOMPurify.sanitize(parsedAnswer.answerHtml);\r\n\r\n    return (\r\n        <Stack className={`${styles.answerContainer} ${isSelected && styles.selected}`} verticalAlign=\"space-between\">\r\n            <Stack.Item>\r\n                <Stack horizontal horizontalAlign=\"space-between\">\r\n                    <AnswerIcon />\r\n                    <div>\r\n                        <IconButton\r\n                            style={{ color: \"black\" }}\r\n                            iconProps={{ iconName: \"Lightbulb\" }}\r\n                            title=\"Show thought process\"\r\n                            ariaLabel=\"Show thought process\"\r\n                            onClick={() => onThoughtProcessClicked()}\r\n                            disabled={!answer.thoughts}\r\n                        />\r\n                        <IconButton\r\n                            style={{ color: \"black\" }}\r\n                            iconProps={{ iconName: \"ClipboardList\" }}\r\n                            title=\"Show supporting content\"\r\n                            ariaLabel=\"Show supporting content\"\r\n                            onClick={() => onSupportingContentClicked()}\r\n                            disabled={!answer.data_points.length}\r\n                        />\r\n                    </div>\r\n                </Stack>\r\n            </Stack.Item>\r\n\r\n            <Stack.Item grow>\r\n                <div className={styles.answerText} dangerouslySetInnerHTML={{ __html: sanitizedAnswerHtml }}></div>\r\n            </Stack.Item>\r\n\r\n            {!!parsedAnswer.citations.length && (\r\n                <Stack.Item>\r\n                    <Stack horizontal wrap tokens={{ childrenGap: 5 }}>\r\n                        <span className={styles.citationLearnMore}>Citations:</span>\r\n                        {parsedAnswer.citations.map((x, i) => {\r\n                            const path = getCitationFilePath(x);\r\n                            return (\r\n                                <a key={i} className={styles.citation} title={x} onClick={() => onCitationClicked(path)}>\r\n                                    {`${++i}. ${x}`}\r\n                                </a>\r\n                            );\r\n                        })}\r\n                    </Stack>\r\n                </Stack.Item>\r\n            )}\r\n\r\n            {!!parsedAnswer.followupQuestions.length && showFollowupQuestions && onFollowupQuestionClicked && (\r\n                <Stack.Item>\r\n                    <Stack horizontal wrap className={`${!!parsedAnswer.citations.length ? styles.followupQuestionsList : \"\"}`} tokens={{ childrenGap: 6 }}>\r\n                        <span className={styles.followupQuestionLearnMore}>Follow-up questions:</span>\r\n                        {parsedAnswer.followupQuestions.map((x, i) => {\r\n                            return (\r\n                                <a key={i} className={styles.followupQuestion} title={x} onClick={() => onFollowupQuestionClicked(x)}>\r\n                                    {`${x}`}\r\n                                </a>\r\n                            );\r\n                        })}\r\n                    </Stack>\r\n                </Stack.Item>\r\n            )}\r\n        </Stack>\r\n    );\r\n};\r\n","import { Stack } from \"@fluentui/react\";\r\nimport { animated, useSpring } from \"@react-spring/web\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\nimport { AnswerIcon } from \"./AnswerIcon\";\r\n\r\nexport const AnswerLoading = () => {\r\n    const animatedStyles = useSpring({\r\n        from: { opacity: 0 },\r\n        to: { opacity: 1 }\r\n    });\r\n\r\n    return (\r\n        <animated.div style={{ ...animatedStyles }}>\r\n            <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\r\n                <AnswerIcon />\r\n                <Stack.Item grow>\r\n                    <p className={styles.answerText}>\r\n                        Generando respuesta\r\n                        <span className={styles.loadingdots} />\r\n                    </p>\r\n                </Stack.Item>\r\n            </Stack>\r\n        </animated.div>\r\n    );\r\n};\r\n","import { Stack, PrimaryButton } from \"@fluentui/react\";\r\nimport { ErrorCircle24Regular } from \"@fluentui/react-icons\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\n\r\ninterface Props {\r\n    error: string;\r\n    onRetry: () => void;\r\n}\r\n\r\nexport const AnswerError = ({ error, onRetry }: Props) => {\r\n    return (\r\n        <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\r\n            <ErrorCircle24Regular aria-hidden=\"true\" aria-label=\"Error icon\" primaryFill=\"red\" />\r\n\r\n            <Stack.Item grow>\r\n                <p className={styles.answerText}>{error}</p>\r\n            </Stack.Item>\r\n\r\n            <PrimaryButton className={styles.retryButton} onClick={onRetry} text=\"Volver a intentar\" />\r\n        </Stack>\r\n    );\r\n};\r\n","import { useState } from \"react\";\r\nimport { Stack, TextField } from \"@fluentui/react\";\r\nimport { Send28Filled } from \"@fluentui/react-icons\";\r\n\r\nimport styles from \"./QuestionInput.module.css\";\r\n\r\ninterface Props {\r\n    onSend: (question: string) => void;\r\n    disabled: boolean;\r\n    placeholder?: string;\r\n    clearOnSend?: boolean;\r\n}\r\n\r\nexport const QuestionInput = ({ onSend, disabled, placeholder, clearOnSend }: Props) => {\r\n    const [question, setQuestion] = useState<string>(\"\");\r\n\r\n    const sendQuestion = () => {\r\n        if (disabled || !question.trim()) {\r\n            return;\r\n        }\r\n\r\n        onSend(question);\r\n\r\n        if (clearOnSend) {\r\n            setQuestion(\"\");\r\n        }\r\n    };\r\n\r\n    const onEnterPress = (ev: React.KeyboardEvent<Element>) => {\r\n        if (ev.key === \"Enter\" && !ev.shiftKey) {\r\n            ev.preventDefault();\r\n            sendQuestion();\r\n        }\r\n    };\r\n\r\n    const onQuestionChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        if (!newValue) {\r\n            setQuestion(\"\");\r\n        } else if (newValue.length <= 1000) {\r\n            setQuestion(newValue);\r\n        }\r\n    };\r\n\r\n    const sendQuestionDisabled = disabled || !question.trim();\r\n\r\n    return (\r\n        <Stack horizontal className={styles.questionInputContainer}>\r\n            <TextField\r\n                className={styles.questionInputTextArea}\r\n                placeholder={placeholder}\r\n                multiline\r\n                resizable={false}\r\n                borderless\r\n                value={question}\r\n                onChange={onQuestionChange}\r\n                onKeyDown={onEnterPress}\r\n            />\r\n            <div className={styles.questionInputButtonsContainer}>\r\n                <div\r\n                    className={`${styles.questionInputSendButton} ${sendQuestionDisabled ? styles.questionInputSendButtonDisabled : \"\"}`}\r\n                    aria-label=\"Ask question button\"\r\n                    onClick={sendQuestion}\r\n                >\r\n                    <Send28Filled primaryFill=\"rgba(115, 118, 225, 1)\" />\r\n                </div>\r\n            </div>\r\n        </Stack>\r\n    );\r\n};\r\n","import styles from \"./Example.module.css\";\r\n\r\ninterface Props {\r\n    text: string;\r\n    value: string;\r\n    onClick: (value: string) => void;\r\n}\r\n\r\nexport const Example = ({ text, value, onClick }: Props) => {\r\n    return (\r\n        <div className={styles.example} onClick={() => onClick(value)}>\r\n            <p className={styles.exampleText}>{text}</p>\r\n        </div>\r\n    );\r\n};\r\n","import { Example } from \"./Example\";\r\n\r\nimport styles from \"./Example.module.css\";\r\n\r\nexport type ExampleModel = {\r\n    text: string;\r\n    value: string;\r\n};\r\n\r\nconst EXAMPLES: ExampleModel[] = [\r\n    {\r\n        text: \"¿Qué te gustaría lograr o contribuir en tu vida profesional?\" ,value:\"\"\r\n    },\r\n    { text: \"¿Tienes alguna pasión o causa social que te interese? \", value: \"\" },\r\n    { text: \"¿Qué valores son importantes para ti en una carrera?\", value: \"\" }\r\n];\r\n\r\ninterface Props {\r\n    onExampleClicked: (value: string) => void;\r\n}\r\n\r\nexport const ExampleList = ({ onExampleClicked }: Props) => {\r\n    return (\r\n        <ul className={styles.examplesNavList}>\r\n            {EXAMPLES.map((x, i) => (\r\n                <li key={i}>\r\n                    <Example text={x.text} value={x.value} onClick={onExampleClicked} />\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n","import styles from \"./UserChatMessage.module.css\";\r\n\r\ninterface Props {\r\n    message: string;\r\n}\r\n\r\nexport const UserChatMessage = ({ message }: Props) => {\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.message}>{message}</div>\r\n        </div>\r\n    );\r\n};\r\n","type ParsedSupportingContentItem = {\r\n    title: string;\r\n    content: string;\r\n};\r\n\r\nexport function parseSupportingContentItem(item: string): ParsedSupportingContentItem {\r\n    // Assumes the item starts with the file name followed by : and the content.\r\n    // Example: \"sdp_corporate.pdf: this is the content that follows\".\r\n    const parts = item.split(\": \");\r\n    const title = parts[0];\r\n    const content = parts.slice(1).join(\": \");\r\n\r\n    return {\r\n        title,\r\n        content\r\n    };\r\n}\r\n","import { parseSupportingContentItem } from \"./SupportingContentParser\";\r\n\r\nimport styles from \"./SupportingContent.module.css\";\r\n\r\ninterface Props {\r\n    supportingContent: string[];\r\n}\r\n\r\nexport const SupportingContent = ({ supportingContent }: Props) => {\r\n    return (\r\n        <ul className={styles.supportingContentNavList}>\r\n            {supportingContent.map((x, i) => {\r\n                const parsed = parseSupportingContentItem(x);\r\n\r\n                return (\r\n                    <li className={styles.supportingContentItem}>\r\n                        <h4 className={styles.supportingContentItemHeader}>{parsed.title}</h4>\r\n                        <p className={styles.supportingContentItemText}>{parsed.content}</p>\r\n                    </li>\r\n                );\r\n            })}\r\n        </ul>\r\n    );\r\n};\r\n","export enum AnalysisPanelTabs {\r\n    ThoughtProcessTab = \"thoughtProcess\",\r\n    SupportingContentTab = \"supportingContent\",\r\n    CitationTab = \"citation\"\r\n}\r\n","import { Pivot, PivotItem } from \"@fluentui/react\";\r\nimport DOMPurify from \"dompurify\";\r\n\r\nimport styles from \"./AnalysisPanel.module.css\";\r\n\r\nimport { SupportingContent } from \"../SupportingContent\";\r\nimport { AskResponse } from \"../../api\";\r\nimport { AnalysisPanelTabs } from \"./AnalysisPanelTabs\";\r\n\r\ninterface Props {\r\n    className: string;\r\n    activeTab: AnalysisPanelTabs;\r\n    onActiveTabChanged: (tab: AnalysisPanelTabs) => void;\r\n    activeCitation: string | undefined;\r\n    citationHeight: string;\r\n    answer: AskResponse;\r\n}\r\n\r\nconst pivotItemDisabledStyle = { disabled: true, style: { color: \"grey\" } };\r\n\r\nexport const AnalysisPanel = ({ answer, activeTab, activeCitation, citationHeight, className, onActiveTabChanged }: Props) => {\r\n    const isDisabledThoughtProcessTab: boolean = !answer.thoughts;\r\n    const isDisabledSupportingContentTab: boolean = !answer.data_points.length;\r\n    const isDisabledCitationTab: boolean = !activeCitation;\r\n\r\n    const sanitizedThoughts = DOMPurify.sanitize(answer.thoughts!);\r\n\r\n    return (\r\n        <Pivot\r\n            className={className}\r\n            selectedKey={activeTab}\r\n            onLinkClick={pivotItem => pivotItem && onActiveTabChanged(pivotItem.props.itemKey! as AnalysisPanelTabs)}\r\n        >\r\n            <PivotItem\r\n                itemKey={AnalysisPanelTabs.ThoughtProcessTab}\r\n                headerText=\"Procesando\"\r\n                headerButtonProps={isDisabledThoughtProcessTab ? pivotItemDisabledStyle : undefined}\r\n            >\r\n                <div className={styles.thoughtProcess} dangerouslySetInnerHTML={{ __html: sanitizedThoughts }}></div>\r\n            </PivotItem>\r\n            <PivotItem\r\n                itemKey={AnalysisPanelTabs.SupportingContentTab}\r\n                headerText=\"Contenido de apoyo\"\r\n                headerButtonProps={isDisabledSupportingContentTab ? pivotItemDisabledStyle : undefined}\r\n            >\r\n                <SupportingContent supportingContent={answer.data_points} />\r\n            </PivotItem>\r\n            <PivotItem\r\n                itemKey={AnalysisPanelTabs.CitationTab}\r\n                headerText=\"Fuente\"\r\n                headerButtonProps={isDisabledCitationTab ? pivotItemDisabledStyle : undefined}\r\n            >\r\n                <iframe title=\"Fuente\" src={activeCitation} width=\"100%\" height={citationHeight} />\r\n            </PivotItem>\r\n        </Pivot>\r\n    );\r\n};\r\n","import { Text } from \"@fluentui/react\";\r\nimport { Settings24Regular } from \"@fluentui/react-icons\";\r\n\r\nimport styles from \"./SettingsButton.module.css\";\r\n\r\ninterface Props {\r\n    className?: string;\r\n    onClick: () => void;\r\n}\r\n\r\nexport const SettingsButton = ({ className, onClick }: Props) => {\r\n    return (\r\n        <div className={`${styles.container} ${className ?? \"\"}`} onClick={onClick}>\r\n            <Settings24Regular />\r\n            <Text>{\"Ajustes\"}</Text>\r\n        </div>\r\n    );\r\n};\r\n","import { Text } from \"@fluentui/react\";\r\nimport { Delete24Regular } from \"@fluentui/react-icons\";\r\n\r\nimport styles from \"./ClearChatButton.module.css\";\r\n\r\ninterface Props {\r\n    className?: string;\r\n    onClick: () => void;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport const ClearChatButton = ({ className, disabled, onClick }: Props) => {\r\n    return (\r\n        <div className={`${styles.container} ${className ?? \"\"} ${disabled && styles.disabled}`} onClick={onClick}>\r\n            <Delete24Regular />\r\n            <Text>{\"Limpiar chat\"}</Text>\r\n        </div>\r\n    );\r\n};\r\n","import { useRef, useState, useEffect } from \"react\";\r\nimport { Checkbox, Panel, DefaultButton, TextField, SpinButton } from \"@fluentui/react\";\r\nimport { SparkleFilled } from \"@fluentui/react-icons\";\r\n\r\nimport styles from \"./Chat.module.css\";\r\nimport logo from '../../assets/Logo.svg';\r\n\r\nimport { chatApi, Approaches, AskResponse, ChatRequest, ChatTurn } from \"../../api\";\r\nimport { Answer, AnswerError, AnswerLoading } from \"../../components/Answer\";\r\nimport { QuestionInput } from \"../../components/QuestionInput\";\r\nimport { ExampleList } from \"../../components/Example\";\r\nimport { UserChatMessage } from \"../../components/UserChatMessage\";\r\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\r\nimport { SettingsButton } from \"../../components/SettingsButton\";\r\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\r\n\r\nconst Chat = () => {\r\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\r\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\r\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\r\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\r\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\r\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\r\n    const [useSuggestFollowupQuestions, setUseSuggestFollowupQuestions] = useState<boolean>(false);\r\n\r\n    const lastQuestionRef = useRef<string>(\"\");\r\n    const chatMessageStreamEnd = useRef<HTMLDivElement | null>(null);\r\n\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [error, setError] = useState<unknown>();\r\n\r\n    const [activeCitation, setActiveCitation] = useState<string>();\r\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\r\n\r\n    const [selectedAnswer, setSelectedAnswer] = useState<number>(0);\r\n    const [answers, setAnswers] = useState<[user: string, response: AskResponse][]>([]);\r\n\r\n    const makeApiRequest = async (question: string) => {\r\n        lastQuestionRef.current = question;\r\n\r\n        error && setError(undefined);\r\n        setIsLoading(true);\r\n        setActiveCitation(undefined);\r\n        setActiveAnalysisPanelTab(undefined);\r\n\r\n        try {\r\n            const history: ChatTurn[] = answers.map(a => ({ user: a[0], bot: a[1].answer }));\r\n            const request: ChatRequest = {\r\n                history: [...history, { user: question, bot: undefined }],\r\n                approach: Approaches.ReadRetrieveRead,\r\n                overrides: {\r\n                    promptTemplate: promptTemplate.length === 0 ? undefined : promptTemplate,\r\n                    excludeCategory: excludeCategory.length === 0 ? undefined : excludeCategory,\r\n                    top: retrieveCount,\r\n                    semanticRanker: useSemanticRanker,\r\n                    semanticCaptions: useSemanticCaptions,\r\n                    suggestFollowupQuestions: useSuggestFollowupQuestions\r\n                }\r\n            };\r\n            const result = await chatApi(request);\r\n            setAnswers([...answers, [question, result]]);\r\n        } catch (e) {\r\n            setError(e);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const clearChat = () => {\r\n        lastQuestionRef.current = \"\";\r\n        error && setError(undefined);\r\n        setActiveCitation(undefined);\r\n        setActiveAnalysisPanelTab(undefined);\r\n        setAnswers([]);\r\n    };\r\n\r\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" }), [isLoading]);\r\n\r\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        setPromptTemplate(newValue || \"\");\r\n    };\r\n\r\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\r\n        setRetrieveCount(parseInt(newValue || \"3\"));\r\n    };\r\n\r\n    const onUseSemanticRankerChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSemanticRanker(!!checked);\r\n    };\r\n\r\n    const onUseSemanticCaptionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSemanticCaptions(!!checked);\r\n    };\r\n\r\n    const onExcludeCategoryChanged = (_ev?: React.FormEvent, newValue?: string) => {\r\n        setExcludeCategory(newValue || \"\");\r\n    };\r\n\r\n    const onUseSuggestFollowupQuestionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSuggestFollowupQuestions(!!checked);\r\n    };\r\n\r\n    const onExampleClicked = (example: string) => {\r\n        makeApiRequest(example);\r\n    };\r\n\r\n    const onShowCitation = (citation: string, index: number) => {\r\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab && selectedAnswer === index) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveCitation(citation);\r\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\r\n        }\r\n\r\n        setSelectedAnswer(index);\r\n    };\r\n\r\n    const onToggleTab = (tab: AnalysisPanelTabs, index: number) => {\r\n        if (activeAnalysisPanelTab === tab && selectedAnswer === index) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveAnalysisPanelTab(tab);\r\n        }\r\n\r\n        setSelectedAnswer(index);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.commandsContainer}>\r\n                <ClearChatButton className={styles.commandButton} onClick={clearChat} disabled={!lastQuestionRef.current || isLoading} />\r\n                <SettingsButton className={styles.commandButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\r\n            </div>\r\n            <div className={styles.chatRoot}>\r\n                <div className={styles.chatContainer}>\r\n                    {!lastQuestionRef.current ? (\r\n                        <div className={styles.chatEmptyState}>\r\n                            <div style={{ fontSize: '120px', marginBottom: '16px' }}>\r\n                                <img src={logo} alt=\"Logo\"  style={{ width: '360px' }}/>\r\n                            </div>\r\n                            <h1 className={styles.chatEmptyStateTitle}>¿En qué te podemos ayudar?</h1>\r\n                            <h2 className={styles.chatEmptyStateSubtitle}>Pregunta cualquier cosa o utilizar uno de nuestros ejemplos</h2>\r\n                            <ExampleList onExampleClicked={onExampleClicked} />\r\n                        </div>\r\n                    ) : (\r\n                        <div className={styles.chatMessageStream}>\r\n                            {answers.map((answer, index) => (\r\n                                <div key={index}>\r\n                                    <UserChatMessage message={answer[0]} />\r\n                                    <div className={styles.chatMessageGpt}>\r\n                                        <Answer\r\n                                            key={index}\r\n                                            answer={answer[1]}\r\n                                            isSelected={selectedAnswer === index && activeAnalysisPanelTab !== undefined}\r\n                                            onCitationClicked={c => onShowCitation(c, index)}\r\n                                            onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\r\n                                            onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\r\n                                            onFollowupQuestionClicked={q => makeApiRequest(q)}\r\n                                            showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                            {isLoading && (\r\n                                <>\r\n                                    <UserChatMessage message={lastQuestionRef.current} />\r\n                                    <div className={styles.chatMessageGptMinWidth}>\r\n                                        <AnswerLoading />\r\n                                    </div>\r\n                                </>\r\n                            )}\r\n                            {error ? (\r\n                                <>\r\n                                    <UserChatMessage message={lastQuestionRef.current} />\r\n                                    <div className={styles.chatMessageGptMinWidth}>\r\n                                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\r\n                                    </div>\r\n                                </>\r\n                            ) : null}\r\n                            <div ref={chatMessageStreamEnd} />\r\n                        </div>\r\n                    )}\r\n\r\n                    <div className={styles.chatInput}>\r\n                        <QuestionInput\r\n                            clearOnSend\r\n                            placeholder=\"Escribe una pregunta (Ejemplo: ¿Cuál carrera involucra machine learning?)\"\r\n                            disabled={isLoading}\r\n                            onSend={question => makeApiRequest(question)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                {answers.length > 0 && activeAnalysisPanelTab && (\r\n                    <AnalysisPanel\r\n                        className={styles.chatAnalysisPanel}\r\n                        activeCitation={activeCitation}\r\n                        onActiveTabChanged={x => onToggleTab(x, selectedAnswer)}\r\n                        citationHeight=\"810px\"\r\n                        answer={answers[selectedAnswer][1]}\r\n                        activeTab={activeAnalysisPanelTab}\r\n                    />\r\n                )}\r\n\r\n                <Panel\r\n                    headerText=\"Configure answer generation\"\r\n                    isOpen={isConfigPanelOpen}\r\n                    isBlocking={false}\r\n                    onDismiss={() => setIsConfigPanelOpen(false)}\r\n                    closeButtonAriaLabel=\"Close\"\r\n                    onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Close</DefaultButton>}\r\n                    isFooterAtBottom={true}\r\n                >\r\n                    <TextField\r\n                        className={styles.chatSettingsSeparator}\r\n                        defaultValue={promptTemplate}\r\n                        label=\"Override prompt template\"\r\n                        multiline\r\n                        autoAdjustHeight\r\n                        onChange={onPromptTemplateChange}\r\n                    />\r\n\r\n                    <SpinButton\r\n                        className={styles.chatSettingsSeparator}\r\n                        label=\"Retrieve this many documents from search:\"\r\n                        min={1}\r\n                        max={50}\r\n                        defaultValue={retrieveCount.toString()}\r\n                        onChange={onRetrieveCountChange}\r\n                    />\r\n                    <TextField className={styles.chatSettingsSeparator} label=\"Exclude category\" onChange={onExcludeCategoryChanged} />\r\n                    <Checkbox\r\n                        className={styles.chatSettingsSeparator}\r\n                        checked={useSemanticRanker}\r\n                        label=\"Use semantic ranker for retrieval\"\r\n                        onChange={onUseSemanticRankerChange}\r\n                    />\r\n                    <Checkbox\r\n                        className={styles.chatSettingsSeparator}\r\n                        checked={useSemanticCaptions}\r\n                        label=\"Use query-contextual summaries instead of whole documents\"\r\n                        onChange={onUseSemanticCaptionsChange}\r\n                        disabled={!useSemanticRanker}\r\n                    />\r\n                    <Checkbox\r\n                        className={styles.chatSettingsSeparator}\r\n                        checked={useSuggestFollowupQuestions}\r\n                        label=\"Suggest follow-up questions\"\r\n                        onChange={onUseSuggestFollowupQuestionsChange}\r\n                    />\r\n                </Panel>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport { createHashRouter, RouterProvider } from \"react-router-dom\";\r\nimport { initializeIcons } from \"@fluentui/react\";\r\n\r\nimport \"./index.css\";\r\n\r\nimport Layout from \"./pages/layout/Layout\";\r\nimport Chat from \"./pages/chat/Chat\";\r\n\r\ninitializeIcons();\r\n\r\nconst router = createHashRouter([\r\n    {\r\n        path: \"/\",\r\n        element: <Layout />,\r\n        children: [\r\n            {\r\n                index: true,\r\n                element: <Chat />\r\n            },\r\n            {\r\n                path: \"qa\",\r\n                lazy: () => import(\"./pages/oneshot/OneShot\")\r\n            },\r\n            {\r\n                path: \"*\",\r\n                lazy: () => import(\"./pages/NoPage\")\r\n            }\r\n        ]\r\n    }\r\n]);\r\n\r\nReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(\r\n    <React.StrictMode>\r\n        <RouterProvider router={router} />\r\n    </React.StrictMode>\r\n);\r\n"],"file":"assets/index-757b271b.js"}