{"version":3,"file":"OneShot-a43e1a47.js","sources":["../../../frontend/src/pages/oneshot/OneShot.tsx"],"sourcesContent":["import { useRef, useState } from \"react\";\r\nimport { Checkbox, ChoiceGroup, IChoiceGroupOption, Panel, DefaultButton, Spinner, TextField, SpinButton } from \"@fluentui/react\";\r\n\r\nimport styles from \"./OneShot.module.css\";\r\n\r\nimport { askApi, Approaches, AskResponse, AskRequest } from \"../../api\";\r\nimport { Answer, AnswerError } from \"../../components/Answer\";\r\nimport { QuestionInput } from \"../../components/QuestionInput\";\r\nimport { ExampleList } from \"../../components/Example\";\r\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\r\nimport { SettingsButton } from \"../../components/SettingsButton/SettingsButton\";\r\n\r\nexport function Component(): JSX.Element {\r\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\r\n    const [approach, setApproach] = useState<Approaches>(Approaches.RetrieveThenRead);\r\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\r\n    const [promptTemplatePrefix, setPromptTemplatePrefix] = useState<string>(\"\");\r\n    const [promptTemplateSuffix, setPromptTemplateSuffix] = useState<string>(\"\");\r\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\r\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\r\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\r\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\r\n\r\n    const lastQuestionRef = useRef<string>(\"\");\r\n\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [error, setError] = useState<unknown>();\r\n    const [answer, setAnswer] = useState<AskResponse>();\r\n\r\n    const [activeCitation, setActiveCitation] = useState<string>();\r\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\r\n\r\n    const makeApiRequest = async (question: string) => {\r\n        lastQuestionRef.current = question;\r\n\r\n        error && setError(undefined);\r\n        setIsLoading(true);\r\n        setActiveCitation(undefined);\r\n        setActiveAnalysisPanelTab(undefined);\r\n\r\n        try {\r\n            const request: AskRequest = {\r\n                question,\r\n                approach,\r\n                overrides: {\r\n                    promptTemplate: promptTemplate.length === 0 ? undefined : promptTemplate,\r\n                    promptTemplatePrefix: promptTemplatePrefix.length === 0 ? undefined : promptTemplatePrefix,\r\n                    promptTemplateSuffix: promptTemplateSuffix.length === 0 ? undefined : promptTemplateSuffix,\r\n                    excludeCategory: excludeCategory.length === 0 ? undefined : excludeCategory,\r\n                    top: retrieveCount,\r\n                    semanticRanker: useSemanticRanker,\r\n                    semanticCaptions: useSemanticCaptions\r\n                }\r\n            };\r\n            const result = await askApi(request);\r\n            setAnswer(result);\r\n        } catch (e) {\r\n            setError(e);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        setPromptTemplate(newValue || \"\");\r\n    };\r\n\r\n    const onPromptTemplatePrefixChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        setPromptTemplatePrefix(newValue || \"\");\r\n    };\r\n\r\n    const onPromptTemplateSuffixChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        setPromptTemplateSuffix(newValue || \"\");\r\n    };\r\n\r\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\r\n        setRetrieveCount(parseInt(newValue || \"3\"));\r\n    };\r\n\r\n    const onApproachChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, option?: IChoiceGroupOption) => {\r\n        setApproach((option?.key as Approaches) || Approaches.RetrieveThenRead);\r\n    };\r\n\r\n    const onUseSemanticRankerChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSemanticRanker(!!checked);\r\n    };\r\n\r\n    const onUseSemanticCaptionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSemanticCaptions(!!checked);\r\n    };\r\n\r\n    const onExcludeCategoryChanged = (_ev?: React.FormEvent, newValue?: string) => {\r\n        setExcludeCategory(newValue || \"\");\r\n    };\r\n\r\n    const onExampleClicked = (example: string) => {\r\n        makeApiRequest(example);\r\n    };\r\n\r\n    const onShowCitation = (citation: string) => {\r\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveCitation(citation);\r\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\r\n        }\r\n    };\r\n\r\n    const onToggleTab = (tab: AnalysisPanelTabs) => {\r\n        if (activeAnalysisPanelTab === tab) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveAnalysisPanelTab(tab);\r\n        }\r\n    };\r\n\r\n    const approaches: IChoiceGroupOption[] = [\r\n        {\r\n            key: Approaches.RetrieveThenRead,\r\n            text: \"Retrieve-Then-Read\"\r\n        },\r\n        {\r\n            key: Approaches.ReadRetrieveRead,\r\n            text: \"Read-Retrieve-Read\"\r\n        },\r\n        {\r\n            key: Approaches.ReadDecomposeAsk,\r\n            text: \"Read-Decompose-Ask\"\r\n        }\r\n    ];\r\n\r\n    return (\r\n        <div className={styles.oneshotContainer}>\r\n            <div className={styles.oneshotTopSection}>\r\n                <SettingsButton className={styles.settingsButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\r\n                <h1 className={styles.oneshotTitle}>Ask your data</h1>\r\n                <div className={styles.oneshotQuestionInput}>\r\n                    <QuestionInput\r\n                        placeholder=\"Example: Does my plan cover annual eye exams?\"\r\n                        disabled={isLoading}\r\n                        onSend={question => makeApiRequest(question)}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className={styles.oneshotBottomSection}>\r\n                {isLoading && <Spinner label=\"Generating answer\" />}\r\n                {!lastQuestionRef.current && <ExampleList onExampleClicked={onExampleClicked} />}\r\n                {!isLoading && answer && !error && (\r\n                    <div className={styles.oneshotAnswerContainer}>\r\n                        <Answer\r\n                            answer={answer}\r\n                            onCitationClicked={x => onShowCitation(x)}\r\n                            onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab)}\r\n                            onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab)}\r\n                        />\r\n                    </div>\r\n                )}\r\n                {error ? (\r\n                    <div className={styles.oneshotAnswerContainer}>\r\n                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\r\n                    </div>\r\n                ) : null}\r\n                {activeAnalysisPanelTab && answer && (\r\n                    <AnalysisPanel\r\n                        className={styles.oneshotAnalysisPanel}\r\n                        activeCitation={activeCitation}\r\n                        onActiveTabChanged={x => onToggleTab(x)}\r\n                        citationHeight=\"600px\"\r\n                        answer={answer}\r\n                        activeTab={activeAnalysisPanelTab}\r\n                    />\r\n                )}\r\n            </div>\r\n\r\n            <Panel\r\n                headerText=\"Configure answer generation\"\r\n                isOpen={isConfigPanelOpen}\r\n                isBlocking={false}\r\n                onDismiss={() => setIsConfigPanelOpen(false)}\r\n                closeButtonAriaLabel=\"Close\"\r\n                onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Close</DefaultButton>}\r\n                isFooterAtBottom={true}\r\n            >\r\n                <ChoiceGroup\r\n                    className={styles.oneshotSettingsSeparator}\r\n                    label=\"Approach\"\r\n                    options={approaches}\r\n                    defaultSelectedKey={approach}\r\n                    onChange={onApproachChange}\r\n                />\r\n\r\n                {(approach === Approaches.RetrieveThenRead || approach === Approaches.ReadDecomposeAsk) && (\r\n                    <TextField\r\n                        className={styles.oneshotSettingsSeparator}\r\n                        defaultValue={promptTemplate}\r\n                        label=\"Override prompt template\"\r\n                        multiline\r\n                        autoAdjustHeight\r\n                        onChange={onPromptTemplateChange}\r\n                    />\r\n                )}\r\n\r\n                {approach === Approaches.ReadRetrieveRead && (\r\n                    <>\r\n                        <TextField\r\n                            className={styles.oneshotSettingsSeparator}\r\n                            defaultValue={promptTemplatePrefix}\r\n                            label=\"Override prompt prefix template\"\r\n                            multiline\r\n                            autoAdjustHeight\r\n                            onChange={onPromptTemplatePrefixChange}\r\n                        />\r\n                        <TextField\r\n                            className={styles.oneshotSettingsSeparator}\r\n                            defaultValue={promptTemplateSuffix}\r\n                            label=\"Override prompt suffix template\"\r\n                            multiline\r\n                            autoAdjustHeight\r\n                            onChange={onPromptTemplateSuffixChange}\r\n                        />\r\n                    </>\r\n                )}\r\n\r\n                <SpinButton\r\n                    className={styles.oneshotSettingsSeparator}\r\n                    label=\"Retrieve this many documents from search:\"\r\n                    min={1}\r\n                    max={50}\r\n                    defaultValue={retrieveCount.toString()}\r\n                    onChange={onRetrieveCountChange}\r\n                />\r\n                <TextField className={styles.oneshotSettingsSeparator} label=\"Exclude category\" onChange={onExcludeCategoryChanged} />\r\n                <Checkbox\r\n                    className={styles.oneshotSettingsSeparator}\r\n                    checked={useSemanticRanker}\r\n                    label=\"Use semantic ranker for retrieval\"\r\n                    onChange={onUseSemanticRankerChange}\r\n                />\r\n                <Checkbox\r\n                    className={styles.oneshotSettingsSeparator}\r\n                    checked={useSemanticCaptions}\r\n                    label=\"Use query-contextual summaries instead of whole documents\"\r\n                    onChange={onUseSemanticCaptionsChange}\r\n                    disabled={!useSemanticRanker}\r\n                />\r\n            </Panel>\r\n        </div>\r\n    );\r\n}\r\n\r\nComponent.displayName = \"OneShot\";\r\n"],"names":["Component","isConfigPanelOpen","setIsConfigPanelOpen","useState","approach","setApproach","Approaches","promptTemplate","setPromptTemplate","promptTemplatePrefix","setPromptTemplatePrefix","promptTemplateSuffix","setPromptTemplateSuffix","retrieveCount","setRetrieveCount","useSemanticRanker","setUseSemanticRanker","useSemanticCaptions","setUseSemanticCaptions","excludeCategory","setExcludeCategory","lastQuestionRef","useRef","isLoading","setIsLoading","error","setError","answer","setAnswer","activeCitation","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","makeApiRequest","question","request","result","askApi","e","onPromptTemplateChange","_ev","newValue","onPromptTemplatePrefixChange","onPromptTemplateSuffixChange","onRetrieveCountChange","onApproachChange","option","onUseSemanticRankerChange","checked","onUseSemanticCaptionsChange","onExcludeCategoryChanged","onExampleClicked","example","onShowCitation","citation","AnalysisPanelTabs","onToggleTab","tab","approaches","jsxs","styles","jsx","SettingsButton","QuestionInput","Spinner","ExampleList","Answer","x","AnswerError","AnalysisPanel","Panel","DefaultButton","ChoiceGroup","TextField","Fragment","SpinButton","Checkbox"],"mappings":"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"}